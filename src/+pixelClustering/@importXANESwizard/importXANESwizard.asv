classdef importXANESwizard < pixelClustering.abstract
    %FIRSTPCMASK Computes the mask
    %   Detailed explanation goes here
    
    properties(Constant)
        name = 'importXANESwizard';
    end
    
    properties
        loadFilepath = []; % filepath to the 'KmeansResults.mat' output by XANES Wizard
        clusterMap = [];
    end
    
    properties(Hidden)
        dataLoadedFlag = false;
    end
    
    methods
        function obj = importXANESwizard(varargin)
            %FIRSTPCMASK Construct an instance of this class
            %
            % Usage:
            %   obj = firstpcMask(varargin) with varargin Name-Value pairs,
            %   e.g. if we set the property 'prop' to 5: 
            %   obj = firstpcMask('prop',5).
            if nargin > 0
                nIn = numel(varargin);
                if mod(nIn,2) ~= 0
                    error('Variables can only be parsed as Name-Value pairs')
                end
                for ii = 1:nIn/2
                    try
                        obj.(varargin{2*ii-1}) = varargin{2*ii};
                    catch
                        error(['The property ''' varargin{2*ii-1} ''' is not recognised.'])
                    end
                end
            end
        end
        
        function obj = compute(obj,~)
            %COMPUTE Loads the XANES Wizard data 'KmeansResults.mat'
            %   
            %   Usage:
            %   [spectrum,nPixels] = getXANES_WizardSpectrum(obj,indices) outputs for
            %   'spectrum' a cell matching the indices of the input images, which
            %   contains a [nBins x nClusters] matrix. Analogously, nPixels is a cell 
            %   array containing a [1 x nClusters] vector with the number of pixels per
            %   cluster. The filename of the 'KmeansResults.mat' clustering result
            %   output file of XANES Wizard is requested via an input dialog box. The
            %   number of result files must match the number of indices.
            %
            %   [spectrum,nPixels] = getXANES_WizardSpectrum(...,filenames)
            %   allows the user to specify the paths to the 'KmeansResults.mat'
            %   file(s). Multiple files can be parsed as cell array.
            %
            %   [spectrum,nPixels,clusterMaps] = getXANES_WizardSpectrum(...)
            %   clusterMaps is a matrix with the dimensions of the input image with the
            %   cluster assignment per pixel. Pixels with a value of 0 are background.
            
            
            if isempty(obj.loadFilepath)
               [file,path] = uigetfile('*.mat',...
                    'Select one or more XANESWizard ''KmeansResults.mat'' output files', ...
                    'MultiSelect', 'off');
               if file == 0
                   error('No file loaded.')
               end
               filename = fullfile(path,file);
            end
            
            % open files
            try
                out = open(filename);
            catch
                error('Could not open file: ''%s''',filename{ii})
            end
            
            if ~isfield(out,'ClusterResult')
                error('Cluster results were not found in file: ''%s''',filename{ii})
            end
            
            ClusterResult = out.ClusterResult;
            obj.clusterMap = ClusterResult{1,3};
            thisCluster = ClusterResult{1,3} == jj;
            
            if obj.input(index).isVolume || obj.input(index).isTimeseries
                warning('Data set %i contains is a volume and/or timeseries. These dimensions are averaged.',indices(ii))
            end
            
            I = getImageProcessed(obj,index,'mean','x','y','c'); % in order to have the mask applied, we cannot directly request 'c'
            
            if size(ClusterResult{1,3},1) ~= size(I,1) || size(ClusterResult{1,3},2) ~= size(I,2)
                error('Dimensions input and cluster result do not match. Got X %i and %i, Y %i and %i, respectively.',size(ClusterResult{1,3},1),size(I,1),size(ClusterResult{1,3},2),size(I,2))
            end
            
            if nargout > 2 % store clustermaps
                clustermaps{ii} = ClusterResult{1,3};
            end
            
            nClusters = max(ClusterResult{1,3},[],'all');
            spectrum{ii} = nan(obj.input(index).getDim('c'),nClusters);
            nPixels{ii} = nan(1,nClusters);
            
            for jj = 1:nClusters
                thisCluster = ClusterResult{1,3} == jj;
                nPixels{ii}(jj) = sum(thisCluster,'all');
                % compute mean
                spectrum{ii}(:,jj) = sum(bsxfun(@times, cast(I,'double'), cast(thisCluster,'double')),[1 2])./nPixels{ii}(jj);
                
            end

        end

        function obj = setLoadFilenames(obj,filepath)
            % SETLOADFILENAME allows to set the filepath of the XANES Wizard data 'KmeansResults.mat'
            % If this function is not run, a file selection dialog box will
            % prompt for a file path when running compute.

            obj.loadFilepath = filepath;
        end

    end

end